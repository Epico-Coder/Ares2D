=======================================================================================================================
Drawing matrices:

std::cout << "-----------------------------------------------" << std::endl;
for (auto model : m_models)
{
	std::cout << "-----------------------------------------------" << std::endl;
	const float* ptr = glm::value_ptr(model);

	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			std::cout << ptr[i + j * 4] << "\t";
		}
		std::cout << std::endl;
	}
	std::cout << "-----------------------------------------------" << std::endl;
}
std::cout << "-----------------------------------------------" << std::endl;


glBindBuffer(GL_SHADER_STORAGE_BUFFER, ssbo);
glm::mat4* ptr = (glm::mat4*)glMapBufferRange(GL_SHADER_STORAGE_BUFFER, 0, m_models.size() * sizeof(glm::mat4), GL_MAP_READ_BIT);

std::cout << "-----------------------------------------------" << std::endl;
for (int i = 0; i < m_models.size(); ++i) {
	glm::mat4 model = ptr[i];
	const float* model_ptr = glm::value_ptr(model);

	std::cout << "-----------------------------------------------" << std::endl;
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			std::cout << model_ptr[i + j * 4] << "\t";
		}
		std::cout << std::endl;
	}
	std::cout << "-----------------------------------------------" << std::endl;
}
std::cout << "-----------------------------------------------" << std::endl;

glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);
glBindBuffer(GL_SHADER_STORAGE_BUFFER, 0);

=======================================================================================================================
=======================================================================================================================

Updating buffers:

m_vbo.Update(m_vertices.data(), m_vertices.size() * sizeof(GLfloat));
m_mbo.Update(m_models.data(), m_models.size() * sizeof(glm::mat4));
m_ibo.Update(m_indices.data(), m_indices.size());

=======================================================================================================================
=======================================================================================================================

Drawing methods:

glDrawElementsInstanced(GL_TRIANGLES, m_indices.size(), GL_UNSIGNED_INT, nullptr, m_models.size());

=======================================================================================================================
=======================================================================================================================

UI:

Ares2D::UI::RenderText(boh, "Sky", 500, 600, Ares2D::Color4{ 0.9f, 0.6f, 0.0f, 1.0f });
Ares2D::UI::RenderText(boh, "Water", rect2.GetPos().x + rect2.GetSize().x / 2, rect2.GetPos().y + rect2.GetSize().y / 2, Ares2D::Color4{0.9f, 0.6f, 0.0f, 1.0f});

=======================================================================================================================
=======================================================================================================================

VFX:

Ares2D::VFX::Start();
Ares2D::VFX::End();

=======================================================================================================================
